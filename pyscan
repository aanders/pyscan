#!/usr/bin/env python3

import argparse
import os
import re
import sys

from dialog import Dialog

import toml

import sane
from PIL import Image

class PyScanUi:

    VERSION = "0.1.0"
    APP_NAME = "pyscan"

    # Non-Breakable Space Character
    # Dialog seems to like to collapse multiple space characters as part of
    # its automatic text formatting/wrapping.  This messes with our attempts
    # at manual indentation in some areas, so we use NBSP there instead.
    NBSP = '\u00a0'

    def __init__(self, args):
        self.device = None

        self.d = Dialog()
        self.d.set_background_title(self.background_title())
        # Dialog doesn't use the alternate screen by default (or even clear
        # the screen afterwards), since each widget is actually a separate
        # instance of the program.  This provides more fluid transitions
        # between widgets, but clutters up the scrollback buffer immensely
        # (e.g. when used inside tmux) If it's more desirable to have the
        # terminal flicker back to the normal screen during every transition,
        # dialog can be forced to use the alternate screen:
        #
        #   self.d.add_persistent_args(('--keep-tite',))

        self.configs = args.config.get('scan_config')
        self.config = next(iter(self.configs)) if self.configs else dict()
        self.formats = args.config.get('format')
        self.format = next(iter(self.formats)) if self.formats else dict()

        # Save files in the working directory by default
        self.directory = os.path.abspath(os.getcwd())

    def background_title(self):
        banner_str = ' '.join((PyScanUi.APP_NAME, PyScanUi.VERSION))
        if self.device:
            banner_str += ' [{}]'.format(' '.join(self.device.scanner_model))
        return banner_str

    def start(self):
        dev_name = self.select_scanner()
        if dev_name:
            with sane.open(dev_name) as self.device:
                # Update background title to contain scanner name
                self.d.set_background_title(self.background_title())
                self.main_loop()

    def select_scanner(self):
        sane_version = sane.init()
        self.d.infobox('\n\n'.join((
            "[Sane Version {}.{}.{}]".format(*sane_version),
            "Please wait, detecting scanners...")))
        devs = sane.get_devices()
        if len(devs) == 0:
            self.d.msgbox("No scanners found!", ok_label="Exit")
            return None
        elif len(devs) == 1:
            return devs[0][0]
        else:
            # 0 => SANE descriptor (e.g. "epjitsu:libusb:001:004")
            # 1 => Vendor (e.g. "Fujitsu")
            # 2 => Model (e.g. "ScanSnap S1300i")
            model_name = lambda d: ' '.join((d[1], d[2]))
            # Mark the first device selected by default
            choices = ((d[0], model_name(d), d[0] == devs[0][0]) for d in devs)
            code, name = self.d.radiolist("Select a scanner to use",
                                          choices=choices, height=10, width=72)
            return name if code == Dialog.OK else None

    def change_config(self):
        code, name = self.d.menu(
            "Choose a configuration to load.\n\n"
            "Arrow keys to move, <Space> or <Enter> to select.",
            title="Select Configuration",
            choices=((config.get("name"), config.get("description"))
                     for config in self.configs),
            menu_height=5, height=15, width=72)
        if code == Dialog.OK:
            self.config = next(c for c in self.configs if c["name"] == name)

    def change_format(self):
        code, name = self.d.menu(
            "Choose an output format.\n\n"
            "Arrow keys to move, <Space> or <Enter> to select.",
            title="Select Output Format",
            choices=((fmt["name"], fmt.get("description", ""))
                     for fmt in self.formats),
            menu_height=5, height=15, width=72)
        if code == Dialog.OK:
            self.format = next(f for f in self.formats if f["name"] == name)

    def _prompt_mkdir(self, directory):
        code = self.d.yesno(' '.join((
            "The directory '{}' does not exist.".format(directory),
            "Would you like to create it?")))
        try:
            if code == Dialog.OK:
                os.makedirs(directory)
                return True
        except PermissionError as e:
            self.d.msgbox(
                "Could not create '{}': Permission denied".format(e.filename))
        return False

    def change_directory(self):
        path = os.path.abspath(self.directory)
        while True:
            code, path = self.d.dselect(path, title='Enter output directory',
                                        height=30, width=90, help_button=True)
            if code == Dialog.OK:
                abspath = os.path.abspath(path)
                if os.path.isdir(abspath):
                    # Selected directory is valid; we're done
                    self.directory = abspath
                    break
                if not os.path.exists(abspath):
                    if self._prompt_mkdir(abspath):
                        # User opted to create the directory; we're done
                        self.directory = abspath
                        break
                else:
                    self.d.msgbox("'{}' is not a valid directory!".format(path))
            elif code == Dialog.HELP:
                self.d.msgbox("DIRECTORY HELP")
            else:
                # Menu was canceled; exit without changing the directory
                break

    def setup_menu(self):
        choices = []
        if self.configs is not None:
            choices.append(('Config', 'Select scanning configuration'))
        if self.formats is not None:
            choices.append(('Format', 'Select output format'))
        choices.append(('Directory', 'Select output directory'))

        # After we change the appropriate setting, return to this menu
        while True:
            code, tag = self.d.menu("Setup Menu", choices=choices,
                                    ok_label="Select", cancel_label="Exit")
            if code != Dialog.OK:
                break # Done

            if tag == 'Config':
                self.change_config()
            elif tag == 'Format':
                self.change_format()
            elif tag == 'Directory':
                self.change_directory()
            else:
                # We should never get here; if we somehow do (maybe a bug
                # in pythondialog), recover by returning to the main screen
                break

    def option_summary(self, width=80, indent=0):
        def bold(s):
            # Dialog supports escape sequences to affect text formatting; these
            # are introduced with \Z and followed with a letter or number.
            # See dialog(1) for the full documentation.
            return r'\Zb' + s + r'\Zn'

        config_title = "Config: {}".format(self.config.get("name", "<none>"))
        format_title = "Format: {}".format(self.format.get("name", "<none>"))
        output_title = "Output directory: {}".format(self.directory)

        config_description = self.config.get("description")
        format_description = self.format.get("description")

        config_lines = [config_description] if config_description else []
        format_lines = [format_description, ""] if format_description else []

        if "settings" in self.config:
            for k, v in self.config["settings"].items():
                pad = width - indent - len(k) - len(str(v))
                config_lines.append(''.join(
                    (PyScanUi.NBSP * indent, k.title(), '.' * pad, str(v))))
            config_lines.append("")

        return '\n'.join((bold(config_title), *config_lines,
                          bold(format_title), *format_lines,
                          bold(output_title)))

    def main_menu(self):
        text = self.option_summary(width=42, indent=4)
        code = self.d.yesno(text, title="Main Menu", extra_button=True,
                            height=15, width=50, ok_label="Scan",
                            extra_label="Options", cancel_label="Quit",
                            colors=True)
        return code

    def do_scan(self):

        self.d.infobox("Scanning in progress, please wait...")
        mgr = PyScanManager(self.device, self.config, self.directory, self.format)
        filenames = mgr.scan()

        header = "The following {} been written to disk:".format(
            "file has" if len(filenames) == 1 else "files have")
        self.d.msgbox('\n'.join((header, "", *filenames)))

    def main_loop(self):
        while True:
            code = self.main_menu()
            if code == Dialog.OK:
                self.do_scan()
            elif code == Dialog.EXTRA:
                self.setup_menu()
            else:
                break


class PyScanManager:

    # Number of digits in the filename number (e.g. 000001.ext)
    DIGITS = 6

    def __init__(self, device, config, directory, format):
        self.device = device
        self.config = config
        self.directory = directory
        self.format = format

    def _get_next_filename(self):
        max_filenum = 0
        ext = self.format["extension"]
        # Use %-formatting to avoid the need for escaping the braces
        template = re.compile(
            r'^([0-9]{%d})\.%s$' % (PyScanManager.DIGITS, re.escape(ext)))
        for entry in os.scandir(self.directory):
            m = template.match(entry.name)
            if m is not None:
                max_filenum = max(int(m.group(1)), max_filenum)

        next_filenum = str(max_filenum + 1).zfill(PyScanManager.DIGITS)
        fname = "{}.{}".format(next_filenum, ext)
        return os.path.join(self.directory, fname)

    def scan(self):
        settings = self.config.get("settings", dict())
        images = []
        for k, v in settings.items():
            setattr(self.device, k, v)

        # Collect all images in memory, avoids unnecessary filesystem I/O
        for img in self.device.multi_scan():
            images.append(img)

        if not images:
            return []

        if self.config.get("rotate_first"):
            images[0] = images[0].transpose(Image.ROTATE_180)

        # Save to disk
        filenames = []

        save_kwargs = dict()
        ext = self.format["extension"]
        if ext == "pdf":
            save_kwargs["resolution"] = settings.get("resolution", 300)

        if self.format.get("collate"):
            if ext == "pdf":
                save_kwargs["save_all"] = True
                save_kwargs["append_images"] = images[1:]
            else:
                # TODO: we can actually support GIF and TIFF as well, but
                # these aren't a priority for now
                raise TypeError("'collate' only supported on PDF format")

            next_filename = self._get_next_filename()
            images[0].save(next_filename, **save_kwargs)
            filenames.append(next_filename)
        else:
            for img in images:
                next_filename = self._get_next_filename()
                img.save(next_filename, **save_kwargs)
                filenames.append(next_filename)

        return filenames


class PyScanConfig:

    DEFAULT_NAME = 'pyscan.toml'

    @classmethod
    def parse_config(cls, raw_config):
        # Set environment variables
        for k in raw_config.get('env', dict()).keys():
            raw_config['env'][k] = os.path.expandvars(raw_config['env'][k])
            os.environ[k] = raw_config['env'][k]
        return raw_config

    @classmethod
    def load_config(cls, path=None, name=None):
        if path is None:
            path = (os.path.expanduser('~/.config'), '/etc')
        if name is None:
            name = PyScanConfig.DEFAULT_NAME
        config = None
        for p in path:
            try:
                with open(os.path.join(p, name)) as f:
                    config = PyScanConfig.parse_config(toml.load(f))
                # Successfully loaded config
                break
            except FileNotFoundError:
                pass
        return config


    @classmethod
    def load_from_file(cls, filename):
        path = os.path.dirname(os.path.abspath(filename))
        name = os.path.basename(filename)
        config = PyScanConfig.load_config(path=(path,), name=name)
        if config is None:
            raise FileNotFoundError(filename)
        return config


class PyScanArgs:

    def __init__(self):
        self.parser = argparse.ArgumentParser()
        self.parser.add_argument('--config', '-c', dest='conffile',
                                 help="Use an alternate config file")

    def parse(self, argv):
        return self.parser.parse_args(args=argv)


def main(argv=None):
    args = PyScanArgs().parse(argv)
    if args.conffile:
        args.config = PyScanConfig.load_from_file(args.conffile)
    else:
        args.config = PyScanConfig.load_config() or dict()

    try:
        PyScanUi(args).start()
    except Exception as e:
        # Clear screen before raising exception
        os.system("clear")
        raise
    else:
        os.system("clear")
    finally:
        sane.exit()

if __name__ == '__main__':
    sys.exit(main())
